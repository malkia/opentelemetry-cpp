# Copyright The OpenTelemetry Authors
# SPDX-License-Identifier: Apache-2.0

# Track changes in folders referenced by copy_directory
startup --host_jvm_args=-DBAZEL_TRACK_SOURCE_DIRECTORIES=1

# Disable ANDROID detection, as it breaks with github actions on the Windows image
# ERROR: D:/a/opentelemetry-cpp/opentelemetry-cpp/BUILD:141:24: While resolving toolchains for target 
#        //:otel_sdk_r (1512d13): invalid registered toolchain '@androidsdk//:sdk-toolchain': 
#                                 error loading package '@@rules_android++android_sdk_repository_extension+androidsdk//': 
#        at D:/b/cefevaif/external/rules_android++android_sdk_repository_extension+androidsdk/helper.bzl:16:6: 
#                                 Unable to find package for @@[unknown repo 'local_config_platform' 
#        requested from @@rules_android++android_sdk_repository_extension+androidsdk]//:constraints.bzl: 
#                                 The repository '@@[unknown repo 'local_config_platform' requested from @@rules_android++android_sdk_repository_extension+androidsdk]' 
#                                 could not be resolved: 
#         No repository visible as '@local_config_platform' from repository '@@rules_android++android_sdk_repository_extension+androidsdk'. 
#         The local_config_platform built-in module is disabled by --incompatible_disable_native_repo_rules. 
#         Either remove that flag, or replace @local_config_platform with @platforms//host.
common --repo_env=ANDROID_HOME=
common --action_env=ANDROID_HOME=
common --host_action_env=ANDROID_HOME=
common --test_env=ANDROID_HOME=

#build --features=parse_headers
#build --features=layering_check

# Don't try to build .so and .dylib shared libs (instead of static) libs on Linux/OSX
# For some reason, with clang-cl, it also tried to do on Windows, where dynamic linking just does not support it.
build --dynamic_mode=off

common --remote_download_all

# Avoid using c:\windows\system32\bash.exe
common:windows --shell_executable="c:\\program files\\git\\usr\\bin\\bash.exe"

# Enable automatic configs based on platform
common --enable_platform_specific_config
common --enable_runfiles

build --build_tag_filters=-jaeger,-opentracing,-opentracing_shim,-etw,-es,-prometheus,-otlp_http,-otlp_http_log,-otlp_http_metric,-zipkin
test --test_tag_filters=-jaeger,-opentracing,-opentracing_shim,-etw,-es,-prometheus,-otlp_http,-otlp_http_log,-otlp_http_metric,-zipkin

build --experimental_convenience_symlinks=clean

build:windows      --copt="/Brepro"      --copt="/guard:cf"      --copt="/guard:ehcont"      --copt="/Z7"      --copt="/JMC-"       --copt="/sdl" 
build:windows --host_copt="/Brepro" --host_copt="/guard:cf" --host_copt="/guard:ehcont" --host_copt="/Z7" --host_copt="/JMC-"  --host_copt="/sdl"
build:windows      --linkopt="/Brepro"      --linkopt="/guard:cf"      --linkopt="/guard:ehcont"      --linkopt="/DEBUG:FULL"      --linkopt="/CETCOMPAT"      --linkopt="/SWAPRUN:NET,CD"      --linkopt="/OPT:REF,NOICF"      --linkopt="/RELEASE"      --linkopt="/DEBUGTYPE:CV,PDATA,FIXUP" 
build:windows --host_linkopt="/Brepro" --host_linkopt="/guard:cf" --host_linkopt="/guard:ehcont" --host_linkopt="/DEBUG:FULL" --host_linkopt="/CETCOMPAT" --host_linkopt="/SWAPRUN:NET,CD" --host_linkopt="/OPT:REF,NOICF" --host_linkopt="/RELEASE" --host_linkopt="/DEBUGTYPE:CV,PDATA,FIXUP" 
build:windows      --copt="/Zc:strictStrings"      --copt="/Gy"      --copt="-DGPR_DISABLE_ABSEIL_SYNC"
build:windows --host_copt="/Zc:strictStrings" --host_copt="/Gy" --host_copt="-DGPR_DISABLE_ABSEIL_SYNC"
build:windows      --linkopt="shell32.lib" 
build:windows --host_linkopt="shell32.lib" 

# Requires Visual Studio 2019 Build Tools installed in default location with the latest compiler (14.29.30133) for x64

build:windows      --action_env=BAZEL_VC_FULL_VERSION=14.29.30133      --action_env=BAZEL_WINSDK_FULL_VERSION=10.0.26100.0
build:windows --host_action_env=BAZEL_VC_FULL_VERSION=14.29.30133 --host_action_env=BAZEL_WINSDK_FULL_VERSION=10.0.26100.0

# build:windows      --action_env=BAZEL_VC_FULL_VERSION=14.50.35503       --action_env=BAZEL_WINSDK_FULL_VERSION=10.0.26100.0
# build:windows --host_action_env=BAZEL_VC_FULL_VERSION=14.50.35503  --host_action_env=BAZEL_WINSDK_FULL_VERSION=10.0.26100.0
# build:windows      --action_env=BAZEL_VC="C:\\Program Files\\Microsoft Visual Studio\\18\\Insiders\\VC"
# build:windows --host_action_env=BAZEL_VC="C:\\Program Files\\Microsoft Visual Studio\\18\\Insiders\\VC"

build:windows --features=shorten_virtual_includes

# grpc+\src/core/util/useful.h(193): error C4146: unary minus operator applied to unsigned type, result still unsigned
build:windows      --copt="/wd4146"
build:windows --host_copt="/wd4146"

# grpc+\src\core\lib\slice\slice.cc(192) : error C4700: uninitialized local variable 'slice' used
build:windows      --copt="/wd4700"
build:windows --host_copt="/wd4700"

# grpc+\src\core\server\server.cc(1655) : error C4703: potentially uninitialized local pointer variable 'rm' used
build:windows      --copt="/wd4703"
build:windows --host_copt="/wd4703"

# c-ares+/src/lib/str/ares_str.c(395): error C4996: 'strcmpi': The POSIX name for this item is deprecated. Instead, use the ISO C and C++ conformant name: _strcmpi. See online help for details
build:windows      --copt="/wd4996"
build:windows --host_copt="/wd4996"

# c-ares+/src/lib/record/ares_dns_record.c(1065): warning C4090: '=': different 'const' qualifiers
build:windows      --copt="/wd4090"
build:windows --host_copt="/wd4090"

# protobuf+/upb/mem/arena.c(523): warning C4047: 'initializing': 'uintptr_t' differs in levels of indirection from 'void *'
build:windows      --copt="/wd4047"
build:windows --host_copt="/wd4047"

# Better C++ :)
build:windows      --copt="/permissive-"
build:windows --host_copt="/permissive-"

# Set minimum supported C++ version
build:macos --host_cxxopt=-std=c++17 --cxxopt=-std=c++17
build:linux --host_cxxopt=-std=c++17 --cxxopt=-std=c++17
build:windows --host_cxxopt=/std:c++17 --cxxopt=/std:c++17

build:linux --copt=-DCIVETWEB_API= --copt=-DCIVETWEB_CXX_API= --cxxopt=-DCIVETWEB_API= --cxxopt=-DCIVETWEB_CXX_API=
build:linux --cxxopt=-fvisibility=hidden --copt=-fvisibility=hidden
#build:linux --fission=yes --copt=-g 
build:linux --copt=-g --strip=never
build:linux --action_env=CC=/usr/bin/clang-19
build:linux --host_action_env=CC=/usr/bin/clang-19

build:macos --copt=-DCIVETWEB_API= --copt=-DCIVETWEB_CXX_API= --cxxopt=-DCIVETWEB_API= --cxxopt=-DCIVETWEB_CXX_API=
build:macos --cxxopt=-fvisibility=hidden --copt=-fvisibility=hidden
build:macos --strip=never --copt=-g --cxxopt=-g
# Does not yet compoile with the Developer command-line tools, needs clang from homebrew
#build:macos --action_env=/Library/Developer/CommandLineTools/usr/bin/clang
#build:macos --host_action_env=/Library/Developer/CommandLineTools/usr/bin/clang
build:macos --action_env=CC=/opt/homebrew/opt/llvm/bin/clang
build:macos --host_action_env=CC=/opt/homebrew/opt/llvm/bin/clang
build:macos --apple_generate_dsym --output_groups=+dsyms
build:macos --objc_generate_linkmap --output_groups=+linkmaps

# Windows specific asan setup
# common:asanwin --copt -fsanitize=address,bool,float-cast-overflow,integer-divide-by-zero,null,return,returns-nonnull-attribute,shift-exponent,signed-integer-overflow,unreachable,vla-bound
#common:asanwin --copt -fsanitize=address,bool,float-cast-overflow,integer-divide-by-zero,null,return,returns-nonnull-attribute,shift-exponent,unreachable,vla-bound
# vptr is not support for "clang-cl"
common:asanwin --copt -fsanitize=address,undefined,implicit-integer-truncation,implicit-integer-arithmetic-value-change,implicit-conversion,integer,nullability,float-divide-by-zero,local-bounds
common:asanwin --copt -fno-sanitize-ignorelist --copt -MD
#alignment,bool,builtin,bounds,array-bounds,enum,float-cast-overflow,integer-divide-by-zero,function,implicit-unsigned-integer-truncation,implicit-signed-integer-truncation,implicit-integer-sign-change,null,return,returns-nonnull-attribute,shift-exponent,unreachable,vla-bound
common:asanwin --copt -fsanitize-address-use-after-scope
common:asanwin --copt -fsanitize-address-globals-dead-stripping
common:asanwin --copt -fsanitize-address-outline-instrumentation
common:asanwin --copt -fsanitize-address-use-after-return=always
common:asanwin --copt -fsanitize-stable-abi
common:asanwin --copt -fno-sanitize-merge
common:asanwin --copt -fsanitize-recover=all

# Gives:
#    lld-link: error: /alternatename: conflicts: __sanitizer_on_print=__sanitizer_on_print__def
#    Use --verbose_failures to see the command lines of failed build steps.
# common:asanwin --copt -fsanitize-stats

# Gives:
#    lld-link: error: duplicate symbol: __cfi_check_fail
#    >>> defined at runfiles.lib(runfiles.obj)
# common:asanwin --copt -fsanitize-cfi-cross-dso

# Gives multiple, like
#   lld-link: error: duplicate symbol: __odr_asan_gen_??_R0?AVios_base@std@@@8
#   >>> defined at runfiles.lib(runfiles.obj)
# common:asanwin --copt -fsanitize-address-use-odr-indicator

# https://github.com/llvm/llvm-project/blob/main/compiler-rt/lib/asan/asan_flags.inc
common:asanwin --test_env="ASAN_OPTIONS=report_globals=0:detect_odr_violation=0:debug=1:strict_init_order=1:check_initialization_order=1:detect_stack_use_after_return=1:print_stats=1:verbosity=0:atexit=1:alloc_dealloc_mismatch=1:strict_string_checks=1:halt_on_error=0:malloc_context_size=0:windows_hook_rtl_allocators=1:print_scariness=1"

# https://github.com/llvm/llvm-project/blob/main/compiler-rt/lib/ubsan/ubsan_flags.inc
common:asanwin --test_env="UBSAN_OPTIONS=print_stacktrace=1:report_error_type=1"
# common:asanwin --test_env="ASAN_OPTIONS=help=1"
common:asanwin --cc_output_directory_tag=asanwin
common:asanwin --@otel_sdk//:asanwin=true
test:asanwin --test_timeout=3600
# common:asanwin -fno-sanitize-coverage=<value>
# common:asanwin -fno-sanitize-recover=<value>
 
common:asan --copt -DADDRESS_SANITIZER
common:asan --copt -fsanitize=address,bool,float-cast-overflow,integer-divide-by-zero,null,return,returns-nonnull-attribute,shift-exponent,signed-integer-overflow,unreachable,vla-bound
common:asan --copt -fsanitize-address-use-after-scope
common:asan --copt -fno-sanitize-recover=all
common:asan --linkopt -fsanitize=address,bool,float-cast-overflow,integer-divide-by-zero,null,return,returns-nonnull-attribute,shift-exponent,signed-integer-overflow,unreachable,vla-bound
common:asan --linkopt -fsanitize-address-use-after-scope
common:asan --linkopt -fno-sanitize-recover=all
common:asan --cc_output_directory_tag=asan

# --config=tsan : Thread Sanitizer.
common:tsan --copt -fsanitize=thread
common:tsan --copt -DTHREAD_SANITIZER
common:tsan --linkopt -fsanitize=thread
common:tsan --cc_output_directory_tag=tsan
# This is needed to address false positive problem with abseil.The same setting as gRPC
# https://github.com/google/sanitizers/issues/953
common:tsan --test_env=TSAN_OPTIONS=report_atomic_races=0

test --test_size_filters=small,medium,large,enormous
test --test_timeout_filters=short,moderate,long,eternal
test --test_verbose_timeout_warnings
test --test_summary=terse

mod --charset=ascii

# This doesn't work with 
# ../com_github_opentelemetry_proto/opentelemetry/proto/collector/metrics/v1/metrics_service.proto: File does not reside within any path specified using --proto_path (or -I).  You must specify a --proto_path which encompasses this file.  Note that the proto_path must be a
#common --experimental_sibling_repository_layout

common --nobuild_runfile_links
startup --windows_enable_symlinks

# common --incompatible_disable_starlark_host_transitions
# common --incompatible_disable_target_default_provider_fields
# common --incompatible_no_rule_outputs_param
# common --incompatible_stop_exporting_language_modules
# common --incompatible_check_visibility_for_toolchains
# common --incompatible_disable_autoloads_in_main_repo
# common --incompatible_stop_exporting_build_file_path
# common --incompatible_autoload_externally

common --experimental_disable_external_package
common --experimental_platforms_api
common --experimental_repository_cache_hardlinks 
common --incompatible_auto_exec_groups
common --incompatible_config_setting_private_default_visibility
common --incompatible_disable_native_repo_rules 
common --incompatible_disable_non_executable_java_binary
common --incompatible_disable_target_provider_fields
common --incompatible_disallow_struct_provider_syntax
common --incompatible_enable_proto_toolchain_resolution
common --incompatible_fail_on_unknown_attributes
common --incompatible_merge_fixed_and_default_shell_env
common --incompatible_no_implicit_file_export
common --incompatible_strict_action_env
common --incompatible_top_level_aspects_require_providers
common --incompatible_use_cc_configure_from_rules_cc
common --incompatible_bazel_test_exec_run_under
common --incompatible_check_testonly_for_output_files
common --incompatible_python_disallow_native_rules
common --incompatible_default_to_explicit_init_py
common --incompatible_disable_non_executable_java_binary
common --incompatible_dont_use_javasourceinfoprovider
common --incompatible_modify_execution_info_additive
common --modify_execution_info=CppCompile=+supports-path-mapping
common --skip_incompatible_explicit_targets

# build --experimental_save_feature_state
# saves .s and .ii files but tends to be super slow
# build --save_temps

mod --lockfile_mode=refresh

# Select clang-cl to be the default compiler on Windows
build:windows --config=clang-cl

# See MODULE.bazel where we've disabled the platform/toolchain setup, but made it back here
build:clang-cl --host_copt=-Wno-dynamic-class-memaccess --copt=-Wno-dynamic-class-memaccess
build:clang-cl --host_copt=-Wno-microsoft-cast --copt=-Wno-microsoft-cast
build:clang-cl --host_copt=-Wno-invalid-offsetof --copt=-Wno-invalid-offsetof

build:clang-cl --host_platform=@otel_sdk//:x64_windows-clang-cl
build:clang-cl --extra_toolchains=@local_config_cc//:cc-toolchain-x64_windows-clang-cl

common --experimental_enable_android_migration_apis

common:linux --force_pic
common:macos --force_pic

startup --client_debug

common --flag_alias=dll=@otel_sdk//:with_dll

# Compiling GRPC without using ABSL sync primitives, as this causes rare hang on Windows
# x/hang/hang_callstack.png
build --copt="-DGRPC_NO_ABSL_SYNC"
build --host_copt="-DGRPC_NO_ABSL_SYNC"

# disable all GRPC experiments
# build --define=grpc_experiments_are_final=true

common:devenv --run_under='"c:/windows/system32/cmd.exe" /C start "bazel debug exe" /wait devenv /debugexe '

## This is what my ../top.bazelrc contains (not in the repo as local to my machine)
# build --disk_cache=f:/b/d
# common --repository_cache=f:/b/r
# startup --output_user_root=f:/b/u
try-import %workspace%/../top.bazelrc
